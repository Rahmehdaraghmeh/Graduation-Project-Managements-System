// <auto-generated />
using System;
using GPMS.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GPMS.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250922124341_make status optinal")]
    partial class makestatusoptinal
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("GPMS.Models.Feedback", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<long?>("SupervisorId")
                        .HasColumnType("bigint");

                    b.Property<long>("TeamId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("SupervisorId");

                    b.HasIndex("TeamId");

                    b.ToTable("Feedbacks");
                });

            modelBuilder.Entity("GPMS.Models.KanbanTask", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<long>("TeamId")
                        .HasColumnType("bigint");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("TeamId");

                    b.ToTable("Tasks");
                });

            modelBuilder.Entity("GPMS.Models.Link", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<long>("StudentId")
                        .HasColumnType("bigint");

                    b.Property<long>("TeamId")
                        .HasColumnType("bigint");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("varchar(500)");

                    b.HasKey("Id");

                    b.HasIndex("StudentId");

                    b.HasIndex("TeamId");

                    b.ToTable("Links");
                });

            modelBuilder.Entity("GPMS.Models.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("bit");

                    b.Property<string>("ProjectTitle")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<long?>("TeamId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("TeamId")
                        .IsUnique()
                        .HasFilter("[TeamId] IS NOT NULL");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("GPMS.Models.Reply", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<long>("FeedbackId")
                        .HasColumnType("bigint");

                    b.Property<long?>("StudentId")
                        .HasColumnType("bigint");

                    b.Property<long?>("SupervisorId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("FeedbackId");

                    b.HasIndex("StudentId");

                    b.HasIndex("SupervisorId");

                    b.ToTable("Replys");
                });

            modelBuilder.Entity("GPMS.Models.Student", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Department")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<long?>("KanbanTaskId")
                        .HasColumnType("bigint");

                    b.Property<bool?>("Status")
                        .HasColumnType("bit");

                    b.Property<long?>("TeamId")
                        .HasColumnType("bigint");

                    b.HasKey("UserId");

                    b.HasIndex("KanbanTaskId");

                    b.HasIndex("TeamId");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("GPMS.Models.Supervisor", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Department")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("MaxTeams")
                        .HasColumnType("int");

                    b.Property<int>("TeamCount")
                        .HasColumnType("int");

                    b.HasKey("UserId");

                    b.ToTable("Supervisors");
                });

            modelBuilder.Entity("GPMS.Models.Team", b =>
                {
                    b.Property<long>("TeamId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("TeamId"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("SupervisorId")
                        .HasColumnType("bigint");

                    b.Property<string>("TeamName")
                        .IsRequired()
                        .HasColumnType("VARCHAR(100)");

                    b.HasKey("TeamId");

                    b.HasIndex("SupervisorId");

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("GPMS.Models.User", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("GPMS.Models.Feedback", b =>
                {
                    b.HasOne("GPMS.Models.Supervisor", "Supervisor")
                        .WithMany("Feedbacks")
                        .HasForeignKey("SupervisorId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("GPMS.Models.Team", "Team")
                        .WithMany("Feedbacks")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Supervisor");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("GPMS.Models.KanbanTask", b =>
                {
                    b.HasOne("GPMS.Models.Team", "Team")
                        .WithMany("KanbanTasks")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Team");
                });

            modelBuilder.Entity("GPMS.Models.Link", b =>
                {
                    b.HasOne("GPMS.Models.Student", "Student")
                        .WithMany("Links")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GPMS.Models.Team", "Team")
                        .WithMany("Links")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("GPMS.Models.Project", b =>
                {
                    b.HasOne("GPMS.Models.Team", "Team")
                        .WithOne("Project")
                        .HasForeignKey("GPMS.Models.Project", "TeamId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Team");
                });

            modelBuilder.Entity("GPMS.Models.Reply", b =>
                {
                    b.HasOne("GPMS.Models.Feedback", "Feedback")
                        .WithMany("Replies")
                        .HasForeignKey("FeedbackId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GPMS.Models.Student", "Student")
                        .WithMany("Replies")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("GPMS.Models.Supervisor", "Supervisor")
                        .WithMany("Replys")
                        .HasForeignKey("SupervisorId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Feedback");

                    b.Navigation("Student");

                    b.Navigation("Supervisor");
                });

            modelBuilder.Entity("GPMS.Models.Student", b =>
                {
                    b.HasOne("GPMS.Models.KanbanTask", null)
                        .WithMany("AssignedStudents")
                        .HasForeignKey("KanbanTaskId");

                    b.HasOne("GPMS.Models.Team", "Team")
                        .WithMany("Students")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("GPMS.Models.User", "User")
                        .WithOne("Student")
                        .HasForeignKey("GPMS.Models.Student", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Team");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GPMS.Models.Supervisor", b =>
                {
                    b.HasOne("GPMS.Models.User", "User")
                        .WithOne("Supervisor")
                        .HasForeignKey("GPMS.Models.Supervisor", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("GPMS.Models.Team", b =>
                {
                    b.HasOne("GPMS.Models.Supervisor", "Supervisor")
                        .WithMany("Teams")
                        .HasForeignKey("SupervisorId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Supervisor");
                });

            modelBuilder.Entity("GPMS.Models.Feedback", b =>
                {
                    b.Navigation("Replies");
                });

            modelBuilder.Entity("GPMS.Models.KanbanTask", b =>
                {
                    b.Navigation("AssignedStudents");
                });

            modelBuilder.Entity("GPMS.Models.Student", b =>
                {
                    b.Navigation("Links");

                    b.Navigation("Replies");
                });

            modelBuilder.Entity("GPMS.Models.Supervisor", b =>
                {
                    b.Navigation("Feedbacks");

                    b.Navigation("Replys");

                    b.Navigation("Teams");
                });

            modelBuilder.Entity("GPMS.Models.Team", b =>
                {
                    b.Navigation("Feedbacks");

                    b.Navigation("KanbanTasks");

                    b.Navigation("Links");

                    b.Navigation("Project");

                    b.Navigation("Students");
                });

            modelBuilder.Entity("GPMS.Models.User", b =>
                {
                    b.Navigation("Student");

                    b.Navigation("Supervisor");
                });
#pragma warning restore 612, 618
        }
    }
}
